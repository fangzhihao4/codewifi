/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Codewifi;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.UserProfitRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户收益记录
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProfit extends TableImpl<UserProfitRecord> {

    private static final long serialVersionUID = 823933913;

    /**
     * The reference instance of <code>codewifi.user_profit</code>
     */
    public static final UserProfit USER_PROFIT = new UserProfit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProfitRecord> getRecordType() {
        return UserProfitRecord.class;
    }

    /**
     * The column <code>codewifi.user_profit.id</code>.
     */
    public final TableField<UserProfitRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>codewifi.user_profit.user_no</code>. 用户
     */
    public final TableField<UserProfitRecord, String> USER_NO = createField(DSL.name("user_no"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "用户");

    /**
     * The column <code>codewifi.user_profit.yesterday_money</code>. 昨日收益
     */
    public final TableField<UserProfitRecord, BigDecimal> YESTERDAY_MONEY = createField(DSL.name("yesterday_money"), org.jooq.impl.SQLDataType.DECIMAL(20, 6).nullable(false), this, "昨日收益");

    /**
     * The column <code>codewifi.user_profit.all_money</code>. 所有收益
     */
    public final TableField<UserProfitRecord, BigDecimal> ALL_MONEY = createField(DSL.name("all_money"), org.jooq.impl.SQLDataType.DECIMAL(20, 6).nullable(false), this, "所有收益");

    /**
     * The column <code>codewifi.user_profit.account_money</code>. 账户余额
     */
    public final TableField<UserProfitRecord, BigDecimal> ACCOUNT_MONEY = createField(DSL.name("account_money"), org.jooq.impl.SQLDataType.DECIMAL(20, 6).nullable(false), this, "账户余额");

    /**
     * The column <code>codewifi.user_profit.withdrawal_money</code>. 提现金额
     */
    public final TableField<UserProfitRecord, BigDecimal> WITHDRAWAL_MONEY = createField(DSL.name("withdrawal_money"), org.jooq.impl.SQLDataType.DECIMAL(20, 6).nullable(false), this, "提现金额");

    /**
     * The column <code>codewifi.user_profit.withdrawal_times</code>. 提现成功次数
     */
    public final TableField<UserProfitRecord, Integer> WITHDRAWAL_TIMES = createField(DSL.name("withdrawal_times"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "提现成功次数");

    /**
     * The column <code>codewifi.user_profit.create_date</code>.
     */
    public final TableField<UserProfitRecord, LocalDate> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>codewifi.user_profit.create_time</code>.
     */
    public final TableField<UserProfitRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>codewifi.user_profit.update_time</code>.
     */
    public final TableField<UserProfitRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>codewifi.user_profit</code> table reference
     */
    public UserProfit() {
        this(DSL.name("user_profit"), null);
    }

    /**
     * Create an aliased <code>codewifi.user_profit</code> table reference
     */
    public UserProfit(String alias) {
        this(DSL.name(alias), USER_PROFIT);
    }

    /**
     * Create an aliased <code>codewifi.user_profit</code> table reference
     */
    public UserProfit(Name alias) {
        this(alias, USER_PROFIT);
    }

    private UserProfit(Name alias, Table<UserProfitRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserProfit(Name alias, Table<UserProfitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户收益记录"), TableOptions.table());
    }

    public <O extends Record> UserProfit(Table<O> child, ForeignKey<O, UserProfitRecord> key) {
        super(child, key, USER_PROFIT);
    }

    @Override
    public Schema getSchema() {
        return Codewifi.CODEWIFI;
    }

    @Override
    public Identity<UserProfitRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_PROFIT;
    }

    @Override
    public UniqueKey<UserProfitRecord> getPrimaryKey() {
        return Keys.KEY_USER_PROFIT_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserProfitRecord>> getKeys() {
        return Arrays.<UniqueKey<UserProfitRecord>>asList(Keys.KEY_USER_PROFIT_PRIMARY);
    }

    @Override
    public UserProfit as(String alias) {
        return new UserProfit(DSL.name(alias), this);
    }

    @Override
    public UserProfit as(Name alias) {
        return new UserProfit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProfit rename(String name) {
        return new UserProfit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProfit rename(Name name) {
        return new UserProfit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Integer, LocalDate, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
