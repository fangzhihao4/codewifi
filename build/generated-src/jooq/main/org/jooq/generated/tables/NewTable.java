/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Codewifi;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.NewTableRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewTable extends TableImpl<NewTableRecord> {

    private static final long serialVersionUID = 1975064110;

    /**
     * The reference instance of <code>codewifi.new_table</code>
     */
    public static final NewTable NEW_TABLE = new NewTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewTableRecord> getRecordType() {
        return NewTableRecord.class;
    }

    /**
     * The column <code>codewifi.new_table.idnew_table</code>.
     */
    public final TableField<NewTableRecord, Integer> IDNEW_TABLE = createField(DSL.name("idnew_table"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>codewifi.new_table</code> table reference
     */
    public NewTable() {
        this(DSL.name("new_table"), null);
    }

    /**
     * Create an aliased <code>codewifi.new_table</code> table reference
     */
    public NewTable(String alias) {
        this(DSL.name(alias), NEW_TABLE);
    }

    /**
     * Create an aliased <code>codewifi.new_table</code> table reference
     */
    public NewTable(Name alias) {
        this(alias, NEW_TABLE);
    }

    private NewTable(Name alias, Table<NewTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewTable(Name alias, Table<NewTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> NewTable(Table<O> child, ForeignKey<O, NewTableRecord> key) {
        super(child, key, NEW_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Codewifi.CODEWIFI;
    }

    @Override
    public UniqueKey<NewTableRecord> getPrimaryKey() {
        return Keys.KEY_NEW_TABLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<NewTableRecord>> getKeys() {
        return Arrays.<UniqueKey<NewTableRecord>>asList(Keys.KEY_NEW_TABLE_PRIMARY);
    }

    @Override
    public NewTable as(String alias) {
        return new NewTable(DSL.name(alias), this);
    }

    @Override
    public NewTable as(Name alias) {
        return new NewTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewTable rename(String name) {
        return new NewTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewTable rename(Name name) {
        return new NewTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
